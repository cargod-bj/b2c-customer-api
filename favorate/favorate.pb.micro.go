// Code generated by protoc-gen-micro. DO NOT EDIT.
// source: favorate/favorate.proto

package favorate

import (
	fmt "fmt"
	common "github.com/cargod-bj/b2c-proto-common/common"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "context"
	api "github.com/micro/go-micro/v2/api"
	client "github.com/micro/go-micro/v2/client"
	server "github.com/micro/go-micro/v2/server"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

// Reference imports to suppress errors if they are not otherwise used.
var _ api.Endpoint
var _ context.Context
var _ client.Option
var _ server.Option

// Api Endpoints for Favorate service

func NewFavorateEndpoints() []*api.Endpoint {
	return []*api.Endpoint{}
}

// Client API for Favorate service

type FavorateService interface {
	//新增客户，返回data.nil
	Add(ctx context.Context, in *FavorateDTO, opts ...client.CallOption) (*common.Response, error)
	//删除客户，这里是假删除，设置status为1表示已删除，返回data.nil
	Delete(ctx context.Context, in *DeleteId, opts ...client.CallOption) (*common.Response, error)
	//更新客户，返回data.nil
	Update(ctx context.Context, in *FavorateDTO, opts ...client.CallOption) (*common.Response, error)
	//获取客户列表，返回客户列表
	GetList(ctx context.Context, in *common.Page, opts ...client.CallOption) (*common.Response, error)
	//获取收藏的车辆iDs
	GetByUser(ctx context.Context, in *User, opts ...client.CallOption) (*common.Response, error)
}

type favorateService struct {
	c    client.Client
	name string
}

func NewFavorateService(name string, c client.Client) FavorateService {
	return &favorateService{
		c:    c,
		name: name,
	}
}

func (c *favorateService) Add(ctx context.Context, in *FavorateDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Favorate.Add", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favorateService) Delete(ctx context.Context, in *DeleteId, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Favorate.Delete", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favorateService) Update(ctx context.Context, in *FavorateDTO, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Favorate.Update", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favorateService) GetList(ctx context.Context, in *common.Page, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Favorate.GetList", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *favorateService) GetByUser(ctx context.Context, in *User, opts ...client.CallOption) (*common.Response, error) {
	req := c.c.NewRequest(c.name, "Favorate.GetByUser", in)
	out := new(common.Response)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Favorate service

type FavorateHandler interface {
	//新增客户，返回data.nil
	Add(context.Context, *FavorateDTO, *common.Response) error
	//删除客户，这里是假删除，设置status为1表示已删除，返回data.nil
	Delete(context.Context, *DeleteId, *common.Response) error
	//更新客户，返回data.nil
	Update(context.Context, *FavorateDTO, *common.Response) error
	//获取客户列表，返回客户列表
	GetList(context.Context, *common.Page, *common.Response) error
	//获取收藏的车辆iDs
	GetByUser(context.Context, *User, *common.Response) error
}

func RegisterFavorateHandler(s server.Server, hdlr FavorateHandler, opts ...server.HandlerOption) error {
	type favorate interface {
		Add(ctx context.Context, in *FavorateDTO, out *common.Response) error
		Delete(ctx context.Context, in *DeleteId, out *common.Response) error
		Update(ctx context.Context, in *FavorateDTO, out *common.Response) error
		GetList(ctx context.Context, in *common.Page, out *common.Response) error
		GetByUser(ctx context.Context, in *User, out *common.Response) error
	}
	type Favorate struct {
		favorate
	}
	h := &favorateHandler{hdlr}
	return s.Handle(s.NewHandler(&Favorate{h}, opts...))
}

type favorateHandler struct {
	FavorateHandler
}

func (h *favorateHandler) Add(ctx context.Context, in *FavorateDTO, out *common.Response) error {
	return h.FavorateHandler.Add(ctx, in, out)
}

func (h *favorateHandler) Delete(ctx context.Context, in *DeleteId, out *common.Response) error {
	return h.FavorateHandler.Delete(ctx, in, out)
}

func (h *favorateHandler) Update(ctx context.Context, in *FavorateDTO, out *common.Response) error {
	return h.FavorateHandler.Update(ctx, in, out)
}

func (h *favorateHandler) GetList(ctx context.Context, in *common.Page, out *common.Response) error {
	return h.FavorateHandler.GetList(ctx, in, out)
}

func (h *favorateHandler) GetByUser(ctx context.Context, in *User, out *common.Response) error {
	return h.FavorateHandler.GetByUser(ctx, in, out)
}
